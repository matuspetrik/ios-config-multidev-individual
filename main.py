import csv
import threading
import time
import datetime
import glob
import os
import sys
#import traceback
from queue import Queue
from getpass import getpass
from netmiko import ConnectHandler
# from netmiko.ssh_exception import NetMikoTimeoutException
# from netmiko.ssh_exception import NetMikoAuthenticationException
# from paramiko.ssh_exception import NoValidConnectionsError, SSHException
# import paramiko
import logging
import Lib.Configurations as Configs
import Lib.Worker as Worker

if os.path.exists(os.getcwd()+"/test.log"):
    os.remove(os.getcwd()+"/test.log")
logger = logging.getLogger("netmiko")
logging.basicConfig(filename='test.log', level=logging.DEBUG)

if os.path.exists(os.getcwd()+"/logs/result.log"):
    os.remove(os.getcwd()+"/logs/result.log")

# Define username and password to login to all routers with
datetime_now = str(datetime.datetime.now()).replace(" ","-")
datetime_now = datetime_now.replace(":","-")
datetime_now = datetime_now.replace(".","-")
#trailing slash is veery important
#PATH_LOG = '/home/matus/testoutput/out-'+datetime_now+'/'
#path where log files will be stored
#PATH_LOG = os.getcwd()+"/raw_data/br013-2019-11-25-19-34-01-400260/logs/"
PATH_CONFIG = os.getcwd()+"/config/" #path for config files
#print(PATH_LOG)
#print(PATH_CONFIG)
print("""
************************************************************************\
*******************
      """)
print("""         USING THIS APPLICATION YOU WILL PUSH THE CONFIGURATION TO \
THE DEVICES.
                                        BE CAREFUL!
""")
print("""
************************************************************************\
*******************
      """)

print("=== [1/4] INPUT - WHERE THE LOGS WILL BE STORED: ")
PATH_LOG = os.getcwd()+"/logs/"
line = ''
site_id = ''
is_folder_generated = False
while True:
    try:
        line = input(PATH_LOG)
        if line == '':
#            print("=== [1/2] OKAY, AT LEAST PROVIDE SITE ID OR DESCRIPTION: ")
            site_id = input("=== [2/4] OKAY, AT LEAST PROVIDE SITE ID OR "
                            "DESCRIPTION: ")
            if site_id == '':
                line = datetime_now
            else:
                line = site_id+"-"+datetime_now
            is_folder_generated = True
        break
    except EOFError:
        break
PATH_LOG = PATH_LOG+line

# if trailing slash is missing, add it to the PATH_LOG string
if PATH_LOG[-1:] != "/":
    PATH_LOG = PATH_LOG+"/"

if is_folder_generated == True:
    print("Store folder autogenerated ... "+PATH_LOG)
is_folder_generated = False

# Create PATH_LOG directory
if not os.path.exists(PATH_LOG):
    os.makedirs(PATH_LOG)

# Get the PATH_LOG where the configuration files are stored
print()
print("=== [3/4] INPUT - CONFIG FILES ABSOLUTE PATH_LOG:")
default_path = os.getcwd()+"/"
# print("==== Are your config files are in: "+PATH_CONFIG+"[Y/n]")
line = input("Your config files are in: "+PATH_CONFIG+" [Y/n] ")
if line == "Y" or line == "y" or line == "":
    pass
else:
    while True:
        line = input("Define where your config files are stored: "+default_path)
        PATH_CONFIG = default_path+line
        if os.path.exists(PATH_CONFIG):
            break
        else:
            print("!!! Directory "+PATH_CONFIG+" not found!!! Define existing \
                  directory...")
line = ''

print("I will search for your config files in: "+PATH_CONFIG)
# if trailing slash is missing, add it to the PATH_LOG string
if PATH_CONFIG[-1:] != "/":
    PATH_CONFIG = PATH_CONFIG+"/"

LIST_OF_FILES = os.listdir(PATH_CONFIG) # returns list

print()
# Get input of IP addresses to be processed
print("=== [4/4] INPUT - IPv4 ADDRESSES: \n=== NOTE: One per line, it is ok to "
      "provide blank lines")
ROUTERS = []
line = ''
while True:
    try:
        line = input()
        if not line.strip():
            break
    except EOFError:
        break
    ROUTERS.append(line.strip())
line = ''

ROUTERS = list(filter(None, ROUTERS)) # fastest remove blank lines from the list
routers_0 = []
for router in ROUTERS:
    if "/" in router:
        routers_0.append(router.split('/')[0])
    else:
        routers_0.append(router)
ROUTERS = routers_0
# print(ROUTERS)
routers = []
routers_notfound = []

routers = set(ROUTERS) & set(LIST_OF_FILES) # find cross-section of two lists
routers_notfound = set(ROUTERS) - set(routers)

if len(routers_notfound) > 0:
    print("WARNING! Config file was not found for following IP(s):")
    for i in routers_notfound:
        print(i)
    line = input("Terminate application? [Y/n] ")
    if line == "Y" or line == "y" or line == "":
        sys.exit()
    else:
        for i in routers_notfound:
            print(f"Creating a blank file for {i}")
            file_path = PATH_CONFIG+i
            with open(file_path, 'w') as file:
                pass  # No content is written to the file
        pass
# routers = list(routers)
routers = list(ROUTERS)
print("========================================================================"
      "==============================================")
print("=== FOLLOWING DEVICES WILL BE CONFIGURED:",routers)
print("=== TOTAL NUMBER OF DEVICES TO BE CONFIGURED:",len(routers))
print("========================================================================"
      "==============================================")
print("=== CONFIG FILES ARE STORED AT:", PATH_CONFIG)
print("========================================================================"
      "==============================================")
print("=== THE OUTPUT FILES WILL BE STORED AT: ", PATH_LOG)
print("=== THE RESULT FILE WILL BE STORED AT: ", os.getcwd()+"/logs/result.log")
print("=== SCRIPT OUTPUT CAN BE VIEWED AT:     tail -f", os.getcwd()+"/test.log")
print("========================================================================"
      "==============================================")

while True:
    USER = input('Your User ID: ')
    if USER.strip().lower() != '':
        break
PASSWORD = getpass(prompt='Password: ', stream=None)
SECRET = PASSWORD


#print(COMMMANDS)

# Define router IPs, you could also make a dictionary imported from a CSV file,
# or create a list from a text file of hostnames
# routers = [
#"10.94.26.6",  #GS293ZbvR070L-12
#"10.94.26.8",  #GS293ZbvR077L-21
#"10.94.47.66", #GS293ZbvGUA39-01
#"10.94.45.2"   #GS293Zbv0000A-01

# "10.71.50.130",
# "10.71.52.2"

# ]

def session(router, output_q, id, common_config, device_type):
    # Place what you want each thread to do here, for example connect to SSH,
    # run a command, get output
    time.sleep(id)
    hostname    = router
    router_ip   = router
    output_dict = {}
    router =    {   'device_type': device_type, 
                    'ip': router_ip, 
                    'username': USER, 
                    'password': PASSWORD, 
                    'secret': SECRET, 
                    'verbose': False,
                    # 'verbose': True,
                    'ssh_config_file': '~/.ssh/config',
                }
    try:
        Worker.session_worker_general(
                            device_type=device_type,
                            router=router,
                            common_config=common_config,
                            output_q=output_q,
                            method="ssh",
                            PATH_CONFIG=PATH_CONFIG,
                            PATH_LOG=PATH_LOG,
                            hostname=hostname,
                            output_dict=output_dict
                            )
        time.sleep(1)
        string = f"SSH OK ({ device_type }) : { router_ip }"
        print(string)
        with open(PATH_LOG+'result.log', 'a') as file:
            file.write(string+"\n")
    except Exception as e:
        string = f"SSH FAILED ({device_type}) : { router_ip }"
        print(string)
        with open(PATH_LOG+'result.log', 'a') as file:
            file.write(string+"\n")
        Configs.write_log(PATH_LOG+hostname+"_FAIL", str(e))
        output = "Failed"
        # output_dict[hostname+"_ERR_FAILED_TIMEOUT"]  = output
        output_dict[hostname]  = output
        output_q.put(output_dict)

if __name__ == "__main__":

    output_q = Queue()

    common_config = Configs.get_common_config(PATH_CONFIG, "common_config")
    each = Configs.ForEach()

    # Start thread for each router in routers list
    id=0
    for router in routers:
        if each.for_each:
            device_type = Configs.get_device_type(each)
        time.sleep(1)
        #print(router)
        my_thread = threading.Thread(
            target=session,
            args=(
                router,
                output_q,
                id,
                common_config,
                device_type
                )
            )
        my_thread.start()
        id=id+1

    # Wait for all threads to complete
    main_thread = threading.currentThread()
    for some_thread in threading.enumerate():
        if some_thread != main_thread:
            some_thread.join()

    while not output_q.empty():
        my_dict = output_q.get()